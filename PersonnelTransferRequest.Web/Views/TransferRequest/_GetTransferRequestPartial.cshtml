@model TransferRequestCreateViewModel
@{
    var openModal = TempData["OpenModal"] as string ?? "false";

    var errorsJson = TempData["ModelErrors"] as string;
    var errors = string.IsNullOrEmpty(errorsJson)
        ? new List<string>()
        : Newtonsoft.Json.JsonConvert.DeserializeObject<List<string>>(errorsJson);
}
<!--for open modal after errors.-->
<input type="hidden" id="openModalFlag" value="@openModal" />


<!-- Modal -->
<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-scrollable">
        <div class="modal-content border-0 custom-box-shadow">

            @Html.AntiForgeryToken()
            <div class="modal-header">
                <h5 class="modal-title fw-bolder fs-14-px" id="exampleModalLabel">Tayin Talebi Oluştur</h5>

                <button type="button" class="btn-close fs-12-px" data-bs-dismiss="modal" aria-label="Kapat"></button>
            </div>
            <div class="modal-body">

                @if (errors != null && errors.Count > 0)
                {
                    <div class="alert alert-danger">
                        <ul>
                            @foreach (var error in errors)
                            {
                                <li>@error</li>
                            }
                        </ul>
                    </div>
                }

                <div class="mb-2">
                    <span class="fs-12-px text-danger">En fazla 5 adet tercihte bulunabilirsiniz. Tercihler farklı iller içermelidir.</span>
                </div>
                <form asp-action="TransferRequestCreate" method="post">
                    <div class="form-group mb-3">
                        <label asp-for="RequestType" class="fw-bolder fs-14-px mb-2">Talep Nedeni</label>
                        <select asp-for="RequestType" class="form-control" asp-items="Html.GetEnumSelectList<RequestType>()">
                            <option value="">Talep Nedeni Seçiniz</option>
                        </select>
                        <span asp-validation-for="RequestType" class="text-danger"></span>
                    </div>

                    <div class="form-group mb-3">
                        <label asp-for="Description" class="fw-bolder fs-14-px mb-2"></label>
                        <textarea asp-for="Description" class="form-control" rows="4"></textarea>
                        <small id="charCount" class="form-text fs-12-px text-danger">Kalan karakter: 5000</small>
                        <span asp-validation-for="Description" class="text-danger"></span>
                    </div>

                    <hr />
                    <h5 class="fw-bolder fs-14-px mb-2">Tercih Edilen Adalet Sarayları</h5>

                    <div id="preferencesContainer">
                        <!--preferences come jquery-->
                    </div>

                    <button type="button" id="addPreferenceBtn" class="btn btn-success btn-sm my-2">
                        <i class="bx bx-plus"></i> Tercih Ekle
                    </button>

                    <div class="modal-footer">
                        <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Vazgeç</button>
                        <button type="submit" class="btn  btn-dark">Kaydet</button>
                    </div>


                </form>
            </div>

        </div>
    </div>
</div>
<partial name="_ValidationScriptsPartial" />

<script>
    //functions come from js/site.js
    $(document).ready(function () {
        // Initially add one preference card
        $('#preferencesContainer').append(createPreferenceCard(preferenceIndex));
        preferenceIndex++;

        // Update Add button visibility
        toggleAddButton();

        // Initialize select2 plugin
        initializeSelect2();

        // Disable duplicate options
        refreshSelectOptions();

        // Add new preference card on button click, if max not reached
        $('#addPreferenceBtn').on('click', function () {
            if (preferenceIndex < maxPreferences) {
                $('#preferencesContainer').append(createPreferenceCard(preferenceIndex));
                preferenceIndex++;
                updatePriorityOrders();
                toggleAddButton();

                initializeSelect2();
                refreshSelectOptions();
            }
        });

        // Remove preference card on remove button click
        $('#preferencesContainer').on('click', '.remove-btn', function () {
            $(this).closest('.card').remove();
            preferenceIndex--;
            updatePriorityOrders();
            toggleAddButton();
            refreshSelectOptions();
        });

        // Update options whenever a select value changes
        $('#preferencesContainer').on('change', '.select2Preference', function () {
            refreshSelectOptions();
        });
    });

    // count char for Description textarea
    $(document).ready(function () {
        const maxLength = 5000;
        $('#Description').on('input', function () {
            let currentLength = $(this).val().length;
            let remaining = maxLength - currentLength;
            $('#charCount').text('Kalan karakter: ' + remaining);
        });
    });

</script>
